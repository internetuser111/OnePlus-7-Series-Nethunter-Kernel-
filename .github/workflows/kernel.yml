name: 🚀 Professional Kernel Builder

on:
  push:
    paths:
      - ".github/workflows/kernel.yml"
  workflow_dispatch:
    inputs:
      COMPILER_CHOICE:
        description: 'Select Compiler Toolchain'
        required: true
        default: 'proton'
        type: choice
        options:
        - proton
        - aosp
        - eva
        - neutron
        - nexus
        - zyc
        - cosmic
        - azure
        - sdclang
        - ghost
        - gray
  schedule:
    - cron: "14 13 * * 5"

jobs:
  Read-configuration:
    name: 📋 Parse Configuration
    runs-on: ubuntu-latest
    outputs:
      CONFIGS: ${{ steps.generate-matrix.outputs.CONFIGS }}
      BUILD_DATE: ${{ steps.generate-builddate.outputs.BUILDDATE }}
      COMPILER: ${{ github.event.inputs.COMPILER_CHOICE || 'proton' }}
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4

      - name: 🔄 Generate Build Matrix
        id: generate-matrix
        run: |
          echo "CONFIGS<<EOF" >> $GITHUB_OUTPUT
          jq -s '[.[][]]' Kernel/configs/*.config.json >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: ⏰ Set Build Date
        id: generate-builddate
        run: echo "BUILDDATE=$(date +'%Y%m%d')" >> $GITHUB_OUTPUT

  Build-Kernel:
    name: "🛠️ Building with ${{ needs.Read-configuration.outputs.COMPILER }}"
    runs-on: ubuntu-latest
    needs: Read-configuration
    env:
      WORKSPACE: ${{ github.workspace }}
      BUILD_DATE: "${{ needs.Read-configuration.outputs.BUILD_DATE }}"
      COMPILER_CHOICE: ${{ needs.Read-configuration.outputs.COMPILER }}
      KERNEL_NAME: "Op7Series_Custom_Kernel"
      KERNEL_REPO: "https://github.com/yaap/kernel_oneplus_sm8150"
      KERNEL_BRANCH: "fourteen"
      KERNEL_DEVICE: "Oneplus7Series"
      KERNEL_DEFCONFIG: "gulch_defconfig"
      OUT_DIR: "${{ github.workspace }}/out"
      CCACHE_DIR: "${{ github.workspace }}/ccache"
      ANYKERNEL3_DIR: "${{ github.workspace }}/AnyKernel3"
      
    steps:
      - name: 💾 Setup 10GB Swap Space
        uses: pierotofy/set-swap-space@master
        with:
          swap-size-gb: 10

      - name: 📥 Checkout Repository
        uses: actions/checkout@v4

      - name: 📦 Install Build Dependencies
        run: |
          echo "🔄 Updating package lists..."
          sudo apt-get update -y
          
          echo "📦 Installing essential packages..."
          sudo apt-get install -y \
            gcc-aarch64-linux-gnu \
            gcc-arm-linux-gnueabi \
            git ccache automake flex lzop bison \
            gperf build-essential zip curl zlib1g-dev \
            g++-multilib libxml2-utils bzip2 libbz2-dev \
            libbz2-1.0 libghc-bzlib-dev squashfs-tools \
            pngcrush schedtool dpkg-dev liblz4-tool make \
            optipng maven libssl-dev pwgen libswitch-perl \
            policycoreutils minicom libxml-sax-base-perl \
            libxml-simple-perl bc libc6-dev-i386 lib32ncurses5-dev \
            libx11-dev lib32z-dev libgl1-mesa-dev xsltproc \
            unzip device-tree-compiler python3 python3-pip

      - name: 🔧 Setup Compiler Toolchain
        run: |
          case ${{ env.COMPILER_CHOICE }} in
            "proton")
              echo "⚡ Setting up Proton Clang..."
              git clone --depth=1 https://github.com/kdrag0n/proton-clang.git proton
              echo "${WORKSPACE}/proton/bin" >> $GITHUB_PATH
              ;;
            "aosp")
              echo "⚡ Setting up AOSP Clang..."
              git clone --depth=1 https://github.com/crdroidandroid/android_prebuilts_clang_host_linux-x86_clang-r498229b aosp-clang
              echo "${WORKSPACE}/aosp-clang/bin" >> $GITHUB_PATH
              ;;
            "eva")
              echo "⚡ Setting up Eva GCC..."
              git clone --depth=1 https://github.com/mvaisakh/gcc-arm64.git -b gcc-new eva64
              git clone --depth=1 https://github.com/mvaisakh/gcc-arm.git -b gcc-new eva32
              echo "${WORKSPACE}/eva64/bin" >> $GITHUB_PATH
              echo "${WORKSPACE}/eva32/bin" >> $GITHUB_PATH
              ;;
            "neutron")
              echo "⚡ Setting up Neutron Clang..."
              git clone --depth=1 https://github.com/Neutron-Clang/neutron-toolchain.git neutron
              echo "${WORKSPACE}/neutron/bin" >> $GITHUB_PATH
              ;;
            "nexus")
              echo "⚡ Setting up Nexus Clang..."
              git clone --depth=1 -b nexus-14 https://gitlab.com/Project-Nexus/nexus-clang.git nexus
              echo "${WORKSPACE}/nexus/bin" >> $GITHUB_PATH
              ;;
            "zyc")
              echo "⚡ Setting up ZyC Clang..."
              git clone --depth=1 https://github.com/ZyCromerZ/Clang.git zyc
              echo "${WORKSPACE}/zyc/bin" >> $GITHUB_PATH
              ;;
            "cosmic")
              echo "⚡ Setting up Cosmic Clang..."
              git clone --depth=1 https://gitlab.com/GhostMaster69/cosmic-clang.git cosmic
              echo "${WORKSPACE}/cosmic/bin" >> $GITHUB_PATH
              ;;
            "azure")
              echo "⚡ Setting up Azure Clang..."
              git clone --depth=1 https://gitlab.com/Panchajanya1999/azure-clang.git azure
              echo "${WORKSPACE}/azure/bin" >> $GITHUB_PATH
              ;;
            "sdclang")
              echo "⚡ Setting up Snapdragon Clang..."
              git clone --depth=1 https://github.com/proprietary-stuff/sdclang.git sdclang
              echo "${WORKSPACE}/sdclang/bin" >> $GITHUB_PATH
              ;;
            "ghost")
              echo "⚡ Setting up Ghost Clang..."
              git clone --depth=1 https://gitlab.com/GhostMaster69/ghost-clang.git ghost
              echo "${WORKSPACE}/ghost/bin" >> $GITHUB_PATH
              ;;
            "gray")
              echo "⚡ Setting up Gray Clang..."
              git clone --depth=1 https://github.com/userariii/gray-clang.git gray
              echo "${WORKSPACE}/gray/bin" >> $GITHUB_PATH
              ;;
          esac

      - name: 📥 Clone Kernel Source
        run: |
          echo "🌟 Cloning kernel source..."
          git clone --depth=1 -b ${{ env.KERNEL_BRANCH }} ${{ env.KERNEL_REPO }} kernel_source
          echo "✅ Kernel source cloned successfully!"

      - name: 🔄 Setup ccache
        uses: hendrikmuhs/ccache-action@v1.2
        with:
          key: ${{ env.KERNEL_NAME }}-${{ env.COMPILER_CHOICE }}
          max-size: 2G

      - name: ⚙️ Configure Build Environment
        run: |
          mkdir -p ${{ env.OUT_DIR }}
          echo "🔧 Setting up build environment..."
          
          case ${{ env.COMPILER_CHOICE }} in
            "proton"|"aosp"|"neutron"|"nexus"|"zyc"|"cosmic"|"azure"|"sdclang"|"ghost"|"gray")
              export KBUILD_COMPILER_STRING="${{ env.COMPILER_CHOICE }} Clang"
              export ARCH=arm64
              export SUBARCH=arm64
              export CROSS_COMPILE=aarch64-linux-gnu-
              export CROSS_COMPILE_ARM32=arm-linux-gnueabi-
              export CC=clang
              export CLANG_TRIPLE=aarch64-linux-gnu-
              ;;
            "eva")
              export KBUILD_COMPILER_STRING="Eva GCC"
              export ARCH=arm64
              export SUBARCH=arm64
              export CROSS_COMPILE=$PWD/eva64/bin/aarch64-elf-
              export CROSS_COMPILE_ARM32=$PWD/eva32/bin/arm-eabi-
              export CC=$CROSS_COMPILE-gcc
              ;;
          esac
          
          echo "✅ Build environment configured!"

      - name: 🚀 Build Kernel
        run: |
          cd kernel_source
          echo "🏗️ Starting kernel build..."
          
          make O=${{ env.OUT_DIR }} ARCH=arm64 ${{ env.KERNEL_DEFCONFIG }}
          
          make -j$(nproc --all) O=${{ env.OUT_DIR }} \
            ARCH=arm64 \
            CC=clang \
            CLANG_TRIPLE=aarch64-linux-gnu- \
            CROSS_COMPILE=aarch64-linux-gnu- \
            CROSS_COMPILE_ARM32=arm-linux-gnueabi- \
            LLVM=1 \
            LLVM_IAS=1 2>&1 | tee kernel_build.log
          
          echo "✅ Kernel build completed!"

      - name: 📦 Prepare AnyKernel3
        if: success()
        run: |
          echo "🔧 Setting up AnyKernel3..."
          git clone --depth=1 https://github.com/internetuser111/AnyKernel3 -b op7-nh ${{ env.ANYKERNEL3_DIR }}
          
          # Copy kernel files
          if [ -f ${{ env.OUT_DIR }}/arch/arm64/boot/Image.gz-dtb ]; then
            cp ${{ env.OUT_DIR }}/arch/arm64/boot/Image.gz-dtb ${{ env.ANYKERNEL3_DIR }}/
          fi
          if [ -f ${{ env.OUT_DIR }}/arch/arm64/boot/dtbo.img ]; then
            cp ${{ env.OUT_DIR }}/arch/arm64/boot/dtbo.img ${{ env.ANYKERNEL3_DIR }}/
          fi
          
          # Zip package
          cd ${{ env.ANYKERNEL3_DIR }}
          zip -r9 "../${{ env.KERNEL_NAME }}-${{ env.COMPILER_CHOICE }}-${{ env.BUILD_DATE }}.zip" * -x .git README.md *placeholder

      - name: 📤 Upload Kernel Package
        if: success()
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.KERNEL_NAME }}-${{ env.COMPILER_CHOICE }}-${{ env.BUILD_DATE }}
          path: ${{ env.KERNEL_NAME }}-${{ env.COMPILER_CHOICE }}-${{ env.BUILD_DATE }}.zip

      - name: 📊 Upload Build Logs
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: build-logs-${{ env.COMPILER_CHOICE }}-${{ env.BUILD_DATE }}
          path: kernel_source/kernel_build.log

      - name: 🎉 Create Release
        uses: softprops/action-gh-release@v1
        if: success()
        with:
          files: ${{ env.KERNEL_NAME }}-${{ env.COMPILER_CHOICE }}-${{ env.BUILD_DATE }}.zip
          name: ${{ env.KERNEL_NAME }} ${{ env.COMPILER_CHOICE }} Build ${{ env.BUILD_DATE }}
          tag_name: ${{ env.COMPILER_CHOICE }}-${{ env.BUILD_DATE }}
          body: |
            🎉 Automated Kernel Build
            
            📱 Device: OnePlus 7 Series
            🔧 Compiler: ${{ env.COMPILER_CHOICE }}
            📅 Build Date: ${{ env.BUILD_DATE }}
            
            ⚡ Features:
            - Base: YAAP Kernel
            - Compiler: ${{ env.COMPILER_CHOICE }}
            - Architecture: ARM64
            
            📝 Notes:
            - Built using GitHub Actions
            - Automated build process
            
            ⚠️ Flash at your own risk!
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: 🧹 Cleanup
        if: always()
        run: |
          echo "🧹 Cleaning up workspace..."
          rm -rf ${{ env.OUT_DIR }}
          rm -rf ${{ env.ANYKERNEL3_DIR }}
          echo "✅ Cleanup completed!"
