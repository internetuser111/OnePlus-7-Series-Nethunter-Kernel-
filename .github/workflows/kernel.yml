name: üöÄ Professional Kernel Builder

on:
  push:
    paths:
      - ".github/workflows/kernel.yml"
      - "Kernel/configs/build.config.json"
  workflow_dispatch:
    inputs:
      COMPILER_NUMBER:
        description: 'Enter compiler number(s) (1-11) - Use format: single number (e.g. 1) or range (e.g. 1:4)'
        required: true
        default: '1'
        type: string
  schedule:
    - cron: "14 13 * * 5"

jobs:
  Parse-Input:
    name: üìã Parse Configuration & Input
    runs-on: ubuntu-latest
    outputs:
      compiler_list: ${{ steps.parse-input.outputs.compiler_list }}
      BUILD_DATE: ${{ steps.generate-builddate.outputs.BUILDDATE }}
      KERNEL_CONFIG: ${{ steps.parse-config.outputs.kernel_config }}
    steps:
      - name: üì• Checkout Repository
        uses: actions/checkout@v4

      - name: üîÑ Parse Configuration and Compiler Input
        id: parse-input
        run: |
          # Read config file
          CONFIG_FILE="Kernel/configs/build.config.json"
          
          # Get compiler input
          INPUT="${{ github.event.inputs.COMPILER_NUMBER || '1' }}"
          
          # Read compiler mappings from config
          COMPILER_MAP=$(jq -r '.compilerToolchains | map({(.id|tostring): .code}) | add' $CONFIG_FILE)
          
          # Function to get compiler code by ID
          get_compiler_code() {
            echo $COMPILER_MAP | jq -r ".[\""$1"\"]"
          }
          
          # Process input
          if [[ $INPUT =~ ^[0-9]+:[0-9]+$ ]]; then
            START=$(echo $INPUT | cut -d':' -f1)
            END=$(echo $INPUT | cut -d':' -f2)
            SELECTED=()
            for ((i=START; i<=END; i++)); do
              COMPILER=$(get_compiler_code $i)
              if [ ! -z "$COMPILER" ] && [ "$COMPILER" != "null" ]; then
                SELECTED+=("$COMPILER")
              fi
            done
          else
            COMPILER=$(get_compiler_code $INPUT)
            if [ ! -z "$COMPILER" ] && [ "$COMPILER" != "null" ]; then
              SELECTED=("$COMPILER")
            fi
          fi
          
          JSON_ARRAY=$(printf '%s\n' "${SELECTED[@]}" | jq -R . | jq -s .)
          echo "compiler_list=$JSON_ARRAY" >> $GITHUB_OUTPUT

      - name: üì• Parse Kernel Configuration
        id: parse-config
        run: |
          CONFIG_FILE="Kernel/configs/build.config.json"
          KERNEL_CONFIG=$(jq -r '.buildConfig.kernelConfig' $CONFIG_FILE)
          echo "kernel_config=$KERNEL_CONFIG" >> $GITHUB_OUTPUT

      - name: ‚è∞ Set Build Date
        id: generate-builddate
        run: echo "BUILDDATE=$(date +'%Y%m%d')" >> $GITHUB_OUTPUT

  Build-Kernel:
    name: "üõ†Ô∏è Building with ${{ matrix.compiler }}"
    runs-on: ubuntu-latest
    needs: Parse-Input
    strategy:
      matrix:
        compiler: ${{ fromJSON(needs.Parse-Input.outputs.compiler_list) }}
      fail-fast: false

    steps:
      - name: üíæ Setup 10GB Swap Space
        uses: pierotofy/set-swap-space@master
        with:
          swap-size-gb: 10

      - name: üì• Checkout Repository
        uses: actions/checkout@v4

      - name: üì¶ Install Build Dependencies
        run: |
          echo "üîÑ Updating package lists..."
          sudo apt-get update -y
          
          echo "üì¶ Installing essential packages..."
          sudo apt-get install -y \
            gcc-aarch64-linux-gnu \
            gcc-arm-linux-gnueabi \
            git ccache automake flex lzop bison \
            gperf build-essential zip curl zlib1g-dev \
            g++-multilib libxml2-utils bzip2 libbz2-dev \
            libbz2-1.0 libghc-bzlib-dev squashfs-tools \
            pngcrush schedtool dpkg-dev liblz4-tool make \
            optipng maven libssl-dev pwgen libswitch-perl \
            policycoreutils minicom libxml-sax-base-perl \
            libxml-simple-perl bc libc6-dev-i386 lib32ncurses5-dev \
            libx11-dev lib32z-dev libgl1-mesa-dev xsltproc \
            unzip device-tree-compiler python3 python3-pip

      - name: üîß Setup Compiler Toolchain
        run: |
          CONFIG_FILE="Kernel/configs/build.config.json"
          COMPILER_INFO=$(jq -r --arg code "${{ matrix.compiler }}" '.compilerToolchains[] | select(.code == $code)' $CONFIG_FILE)
          
          case ${{ matrix.compiler }} in
            "proton"|"aosp"|"neutron"|"nexus"|"zyc"|"cosmic"|"azure"|"sdclang"|"ghost"|"gray")
              REPO=$(echo $COMPILER_INFO | jq -r .repo)
              echo "‚ö° Setting up $(echo $COMPILER_INFO | jq -r .name)..."
              git clone --depth=1 $REPO ${{ matrix.compiler }}
              echo "${GITHUB_WORKSPACE}/${{ matrix.compiler }}/bin" >> $GITHUB_PATH
              ;;
            "eva")
              echo "‚ö° Setting up Eva GCC..."
              REPO64=$(echo $COMPILER_INFO | jq -r .repo64)
              REPO32=$(echo $COMPILER_INFO | jq -r .repo32)
              BRANCH=$(echo $COMPILER_INFO | jq -r .branch)
              git clone --depth=1 $REPO64 -b $BRANCH eva64
              git clone --depth=1 $REPO32 -b $BRANCH eva32
              echo "${GITHUB_WORKSPACE}/eva64/bin" >> $GITHUB_PATH
              echo "${GITHUB_WORKSPACE}/eva32/bin" >> $GITHUB_PATH
              ;;
          esac

      - name: üîÑ Setup ccache
        uses: hendrikmuhs/ccache-action@v1.2
        with:
          key: kernel-${{ matrix.compiler }}
          max-size: 2G

      - name: üì• Clone Kernel Source
        run: |
          CONFIG_FILE="Kernel/configs/build.config.json"
          KERNEL_CONFIG=$(jq -r '.buildConfig.kernelConfig' $CONFIG_FILE)
          
          KERNEL_REPO=$(echo $KERNEL_CONFIG | jq -r .repo)
          KERNEL_BRANCH=$(echo $KERNEL_CONFIG | jq -r .branch)
          
          echo "üåü Cloning kernel source..."
          git clone --depth=1 -b $KERNEL_BRANCH $KERNEL_REPO kernel_source
          echo "‚úÖ Kernel source cloned successfully!"

      - name: ‚öôÔ∏è Configure Build Environment
        run: |
          CONFIG_FILE="Kernel/configs/build.config.json"
          KERNEL_CONFIG=$(jq -r '.buildConfig.kernelConfig' $CONFIG_FILE)
          
          mkdir -p out
          echo "üîß Setting up build environment..."
          
          case ${{ matrix.compiler }} in
            "proton"|"aosp"|"neutron"|"nexus"|"zyc"|"cosmic"|"azure"|"sdclang"|"ghost"|"gray")
              export KBUILD_COMPILER_STRING="${{ matrix.compiler }} Clang"
              export ARCH=arm64
              export SUBARCH=arm64
              export CROSS_COMPILE=aarch64-linux-gnu-
              export CROSS_COMPILE_ARM32=arm-linux-gnueabi-
              export CC=clang
              export CLANG_TRIPLE=aarch64-linux-gnu-
              ;;
            "eva")
              export KBUILD_COMPILER_STRING="Eva GCC"
              export ARCH=arm64
              export SUBARCH=arm64
              export CROSS_COMPILE=$PWD/eva64/bin/aarch64-elf-
              export CROSS_COMPILE_ARM32=$PWD/eva32/bin/arm-eabi-
              export CC=$CROSS_COMPILE-gcc
              ;;
          esac
          
          echo "‚úÖ Build environment configured!"

      - name: üöÄ Build Kernel
        run: |
          cd kernel_source
          
          CONFIG_FILE="../Kernel/configs/build.config.json"
          KERNEL_CONFIG=$(jq -r '.buildConfig.kernelConfig' $CONFIG_FILE)
          DEFCONFIG=$(echo $KERNEL_CONFIG | jq -r .defconfig)
          
          echo "üèóÔ∏è Starting kernel build..."
          
          make O=../out ARCH=arm64 $DEFCONFIG
          
          make -j$(nproc --all) O=../out \
            ARCH=arm64 \
            CC=clang \
            CLANG_TRIPLE=aarch64-linux-gnu- \
            CROSS_COMPILE=aarch64-linux-gnu- \
            CROSS_COMPILE_ARM32=arm-linux-gnueabi- \
            LLVM=1 \
            LLVM_IAS=1 2>&1 | tee kernel_build.log

      - name: üì¶ Package Kernel
        if: success()
        run: |
          CONFIG_FILE="Kernel/configs/build.config.json"
          
          # Get AnyKernel3 config
          AK3_CONFIG=$(jq -r '.buildConfig.anykernel3Config' $CONFIG_FILE)
          AK3_REPO=$(echo $AK3_CONFIG | jq -r .repo)
          AK3_BRANCH=$(echo $AK3_CONFIG | jq -r .branch)
          
          # Clone AnyKernel3
          git clone --depth=1 $AK3_REPO -b $AK3_BRANCH AnyKernel3
          
          # Copy kernel files
          cp out/arch/arm64/boot/Image AnyKernel3/
          cp out/arch/arm64/boot/dtbo.img AnyKernel3/ || true
          find out/arch/arm64/boot/dts/vendor/qcom -name '*.dtb' -exec cat {} + > AnyKernel3/dtb
          
          # Create zip
          KERNEL_NAME=$(jq -r '.buildConfig.kernelConfig.name' $CONFIG_FILE)
          DEVICE=$(jq -r '.buildConfig.kernelConfig.device' $CONFIG_FILE)
          BUILD_DATE=$(date +'%Y%m%d')
          
          cd AnyKernel3
          zip -r9 "../$KERNEL_NAME-$DEVICE-${{ matrix.compiler }}-$BUILD_DATE.zip" * -x .git README.md *placeholder

      - name: üì§ Upload Kernel Package
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.compiler }}-kernel-package
          path: "*.zip"
          if-no-files-found: error

      - name: üì§ Upload Build Log
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.compiler }}-build-log
          path: kernel_source/kernel_build.log
          if-no-files-found: warn

      - name: üìä Build Status Check
        if: always()
        run: |
          if [ -f out/arch/arm64/boot/Image ]; then
            echo "‚úÖ Kernel built successfully!"
            exit 0
          else
            echo "‚ùå Kernel build failed!"
            exit 1
          fi

  Release-Kernel:
    name: üöÄ Create Release
    needs: Build-Kernel
    if: github.event_name == 'workflow_dispatch' || github.event_name == 'schedule'
    runs-on: ubuntu-latest
    steps:
      - name: üì• Download Artifacts
        uses: actions/download-artifact@v3

      - name: üì¶ Prepare Release
        run: |
          mkdir -p release
          find . -name "*.zip" -exec cp {} release/ \;

      - name: üìÖ Get Current Date
        id: date
        run: echo "date=$(date +'%Y.%m.%d')" >> $GITHUB_OUTPUT

      - name: üè∑Ô∏è Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: release/*.zip
          name: Kernel Build ${{ steps.date.outputs.date }}
          tag_name: ${{ steps.date.outputs.date }}
          body: |
            üéâ Automated Kernel Build

            üìÖ Build Date: ${{ steps.date.outputs.date }}
            üîß Compilers Used: ${{ needs.Parse-Input.outputs.compiler_list }}

            üìù Notes:
            - Latest source from default branch
            - Automated build through GitHub Actions
            
            üì¶ Downloads:
            - Kernel packages are attached below
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  Cleanup:
    name: üßπ Cleanup Artifacts
    needs: Release-Kernel
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: üóëÔ∏è Delete Artifacts
        uses: geekyeggo/delete-artifact@v2
        with:
          failOnError: false
          name: |
            *-kernel-package
            *-build-log
