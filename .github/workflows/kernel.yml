name: Build kernels

on:
  workflow_dispatch:

jobs:
  Read-configuration:
    name: üêÇ Parse *.config.json
    runs-on: ubuntu-22.04  # Updated from ubuntu-20.04
    outputs:
      CONFIGS: ${{ steps.generate-matrix.outputs.CONFIGS }}
      BUILD_DATE: ${{ steps.generate-builddate.outputs.BUILDDATE }}
    steps:
      - name: üòÑ Checkout
        uses: actions/checkout@v4

      - name: üòÜ Generate Matrix
        id: generate-matrix
        run: |
          echo "CONFIGS<<EOF" >> $GITHUB_OUTPUT
          jq -s '[.[][]]' Kernel/configs/*.config.json >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: ‚è∞ Set builddate
        id: generate-builddate
        run: echo "BUILDDATE=$(date +'%Y%m%d')" >> $GITHUB_OUTPUT

  Build-Kernel:
    name: "üêé Build kernel"
    runs-on: ubuntu-22.04  # Updated from ubuntu-20.04
    needs:
      - Read-configuration
    strategy:
      max-parallel: 4
      fail-fast: false
      matrix:
        CONFIG: ${{ fromJSON(needs.Read-configuration.outputs.CONFIGS) }}
    env:
      WORKSPACE: ${{ github.workspace }}
      BUILD_DATE: "${{ needs.Read-configuration.outputs.BUILD_DATE }}"
      KERNEL_NAME: ${{ matrix.CONFIG.kernelSource.name }}
      KERNEL_REPO: ${{ matrix.CONFIG.kernelSource.repo }}
      KERNEL_BRANCH: ${{ matrix.CONFIG.kernelSource.branch }}
      KERNEL_DEVICE: ${{ matrix.CONFIG.kernelSource.device }}
      KERNEL_DEFCONFIG_PATH: ${{ matrix.CONFIG.kernelSource.defconfig }}
      ENABLE_CCACHE: ${{ matrix.CONFIG.enableCcache }}
      USE_ANYKERNEL3: ${{ matrix.CONFIG.AnyKernel3.use }}
      CONFIRM_RELEASE: ${{ matrix.CONFIG.AnyKernel3.release }}
      ENABLE_KERNELSU: ${{ matrix.CONFIG.enableKernelSU }}
      ENABLE_LXC: ${{ matrix.CONFIG.enableLXC }}
      OUT_DIR: "${{ github.workspace }}/out"
      CCACHE_DIR: "${{ github.workspace }}/ccache"
    steps:
      - name: üòÑ Checkout
        uses: actions/checkout@v4

      - name: ‚≠ê Install prerequisites
        run: |
          cat /etc/os-release
          sudo apt-get update
          sudo apt-get install -y cpio curl git ftp lftp wget libarchive-tools ccache python3 python3-dev
          sudo apt-get install -y pngcrush schedtool dpkg-dev liblz4-tool make optipng maven device-tree-compiler 
          sudo apt-get install -y libc6-dev-i386 lib32ncurses5-dev libx11-dev lib32z-dev libgl1-mesa-dev xsltproc
          sudo apt-get install -y libxml2-utils libbz2-dev libbz2-1.0 libghc-bzlib-dev squashfs-tools lzop flex tree
          sudo apt-get install -y build-essential bc gcc-aarch64-linux-gnu gcc-arm-linux-gnueabi libssl-dev libfl-dev
          sudo apt-get install -y pwgen libswitch-perl policycoreutils minicom libxml-sax-base-perl libxml-simple-perl 
          sudo apt-get install -y zip unzip tar gzip bzip2 rar unrar llvm g++-multilib bison gperf zlib1g-dev automake
          
          # Download and install mkdtimg utility
          wget https://android.googlesource.com/platform/system/libufdt/+archive/refs/heads/master/utils.tar.gz -O utils.tar.gz
          tar xvf utils.tar.gz
          sudo cp src/mkdtboimg.py /usr/bin/mkdtimg
          sudo chmod a+x /usr/bin/mkdtimg
          rm -f utils.tar.gz
          
      - name: üßπ Cleanup and maximize build space
        uses: easimon/maximize-build-space@master
        with:
          root-reserve-mb: 1024  # Increased from 512
          swap-size-mb: 12288
          remove-dotnet: "true"
          remove-haskell: "true"
          remove-codeql: "true"
          remove-docker-images: "true"
          remove-android: "true"  # Added
          
      - name: üóëÔ∏è Additional cleanup for disk space
        run: |
          sudo rm -rf /usr/share/dotnet /opt/ghc /usr/local/share/boost "$AGENT_TOOLSDIRECTORY" 2>/dev/null || true
          sudo apt-get autoremove -y
          sudo apt-get clean
          df -h
      
      - name: üöÑ Setup ccache
        if: ${{ env.ENABLE_CCACHE == 'true' }}
        id: hash
        run: |
          mkdir -p ${{ env.OUT_DIR }}
          ccache -o compression=true -o cache_dir=${{ env.CCACHE_DIR }} -o max_size=5G
          echo "HASH=$(echo -n '${{ toJSON(matrix.config) }}' | openssl dgst -sha256 | awk '{print $2}')" >> $GITHUB_OUTPUT
          ccache -s

      - name: üöÖ Cache ccache & output
        env:
          HASH: ${{ steps.hash.outputs.HASH }}
        if: ${{ env.ENABLE_CCACHE == 'true' }}
        uses: actions/cache@v4
        with:
          path: |
            ${{ env.OUT_DIR }}
            ${{ env.CCACHE_DIR }}
          key: cache-${{ env.KERNEL_NAME }}-${{ env.HASH }}-${{ env.BUILD_DATE }}
          restore-keys: |
            cache-${{ env.KERNEL_NAME }}-${{ env.HASH }}-
            cache-${{ env.KERNEL_NAME }}-

      - name: üåü Clone kernel source => (${{ env.KERNEL_REPO }})
        run: |
          echo "Cloning kernel source..."
          git clone --recursive --depth=1 -j $(nproc) --branch ${{ env.KERNEL_BRANCH }} ${{ env.KERNEL_REPO }} ${{ env.KERNEL_NAME }}
          echo "Kernel source cloned successfully"

      - name: üîß Remove BOM from dtsi file
        run: |
          DTSI_FILE="${{ env.KERNEL_NAME }}/arch/arm64/boot/dts/qcom/cust-atoll.dtsi"
          if [ -f "$DTSI_FILE" ]; then
            sed -i '1s/^\xEF\xBB\xBF//' "$DTSI_FILE"
            echo "Removed BOM from dtsi file"
          else
            echo "DTSI file not found, skipping BOM removal"
          fi

      - name: üí´ Get toolchains
        env:
          toolchains: "${{ toJSON(matrix.CONFIG.toolchains) }}"
        run: |
          toolchains_num="$(echo $toolchains | jq 'length')"
          echo "ü§î There are $toolchains_num defined toolchains."
          
          for ((i=0;i<toolchains_num;i++)); do
            toolchain=$(echo $toolchains | jq -r ".[$i]")
            toolchain_name=$(echo $toolchain | jq -r ".name")
            
            if echo $toolchain | jq -e 'has("url")' > /dev/null; then
              toolchain_url=$(echo $toolchain | jq -r ".url")
              echo "üîΩ Downloading $toolchain_name from $toolchain_url"
              
              mkdir -p $toolchain_name
              wget -q --show-progress "$toolchain_url" -O "toolchain_archive"
              filename="toolchain_archive"
              
              # Determine file type and extract
              file_type=$(file -b --mime-type "$filename")
              case "$file_type" in
                application/zip)
                  unzip -q "$filename" -d $toolchain_name
                  ;;
                application/x-tar|application/x-gtar)
                  tar xf "$filename" -C $toolchain_name
                  ;;
                application/gzip)
                  tar zxf "$filename" -C $toolchain_name
                  ;;
                application/x-rar*)
                  unrar x "$filename" $toolchain_name
                  ;;
                *)
                  echo "Unknown file type: $file_type"
                  exit 1
                  ;;
              esac
              rm -f "$filename"
              
            else
              toolchain_repo=$(echo $toolchain | jq -r ".repo")
              toolchain_branch=$(echo $toolchain | jq -r ".branch")
              echo "üîΩ Cloning $toolchain_name from $toolchain_repo"
              git clone --recursive --depth=1 -j $(nproc) --branch $toolchain_branch $toolchain_repo $toolchain_name
            fi
            
            # Add toolchain binaries to PATH
            jq -r ".binaryEnv[] | tostring" <<< "$toolchain" | while read -r subPath; do
              echo "${{ env.WORKSPACE }}/$toolchain_name/$subPath" >> $GITHUB_PATH
            done
          done

      - name: üòé Set build args
        id: generate-args
        env:
          PARAMS: "${{ toJSON(matrix.CONFIG.params) }}"
          THREAD: $(nproc --all)
        run: |
          echo "ü§î PATH Variable: $PATH"
          
          ARCH=$(echo $PARAMS | jq -r ".ARCH")
          CC=$(echo $PARAMS | jq -r ".CC")
          args="-j${{ env.THREAD }} O=${{ env.OUT_DIR }} ARCH=$ARCH"
          
          if [ -n "$CC" ] && [ "$CC" != "null" ]; then
            if [[ "$CC" == *"/"* ]]; then
              CC=${{ env.WORKSPACE }}/$CC
            fi
            if [ "${{ env.ENABLE_CCACHE }}" = "true" ]; then
              args="$args CC=\"ccache $CC\""
            else
              args="$args CC=$CC"
            fi
          fi
          
          # Process external commands
          while read -r externalCommand; do
            key=$(echo "$externalCommand" | cut -d= -f1)
            value=$(echo "$externalCommand" | cut -d= -f2-)
            if [[ "$value" == *"/"* ]]; then
              value="${{ env.WORKSPACE }}/$value"
            fi
            args="$args $key=$value"
          done < <(jq -r '.externalCommands | to_entries[] | "\(.key)=\(.value)"' <<< "$PARAMS")
          
          echo "ARCH=$ARCH" >> $GITHUB_OUTPUT
          echo "ARGS=$args" >> $GITHUB_OUTPUT
          echo "ü§î Build args: $args"

      - name: üòã Setup KernelSU
        working-directory: ${{ env.KERNEL_NAME }}
        env:
          ARCH: ${{ steps.generate-args.outputs.ARCH }}
        if: ${{ env.ENABLE_KERNELSU == 'true' }}
        run: |
          echo "Setting up KernelSU..."
          
          # Clean up existing KernelSU
          rm -rf "./KernelSU" "./drivers/kernelsu"
          
          # Install KernelSU
          curl -LSs "https://raw.githubusercontent.com/rifsxd/KernelSU-Next/next/kernel/setup.sh" | bash -
          
          # Add required configs
          DEFCONFIG_PATH="arch/${{ env.ARCH }}/configs/${{ env.KERNEL_DEFCONFIG_PATH }}"
          echo "CONFIG_KPROBES=y" >> "$DEFCONFIG_PATH"
          echo "CONFIG_HAVE_KPROBES=y" >> "$DEFCONFIG_PATH"
          echo "CONFIG_KPROBE_EVENTS=y" >> "$DEFCONFIG_PATH"
          
          echo "KernelSU setup completed"

      - name: üòã Setup LXC docker
        working-directory: ${{ env.KERNEL_NAME }}
        env:
          DEFCONFIG: ${{ env.WORKSPACE }}/${{ env.KERNEL_NAME }}/arch/${{ steps.generate-args.outputs.ARCH }}/configs/${{ env.KERNEL_DEFCONFIG_PATH }}
          ADD_DEFCONFIG: ${{ env.WORKSPACE }}/Kernel/LXC/LXC_defconfig
        if: ${{ env.ENABLE_LXC == 'true' }}
        run: |
          echo "Setting up LXC configuration..."
          
          # Add LXC configs
          if [ -f "${{ env.ADD_DEFCONFIG }}" ]; then
            cat "${{ env.ADD_DEFCONFIG }}" >> "${{ env.DEFCONFIG }}"
          fi
          
          # Modify cgroup files
          for cgroup_file in "kernel/cgroup.c" "kernel/cgroup/cgroup.c"; do
            if [ -f "$cgroup_file" ]; then
              echo "Modifying $cgroup_file for LXC support..."
              
              row=$(grep -n "^static int cgroup_add_file" "$cgroup_file" | cut -d: -f1)
              if [ -n "$row" ]; then
                # Create temporary file with function content
                sed -n "${row},/return 0/p" "$cgroup_file" > /tmp/tmp.txt
                row2=$(grep -n "return 0" /tmp/tmp.txt | head -1 | cut -d: -f1)
                row3=$((row + row2 - 1))
                
                # Insert LXC-specific code
                sed -i "${row3}i\\        }" "$cgroup_file"
                sed -i "${row3}i\\                kernfs_create_link(cgrp->kn, name, kn);" "$cgroup_file"
                sed -i "${row3}i\\                snprintf(name, CGROUP_FILE_NAME_MAX, \"%s.%s\", cft->ss->name, cft->name);" "$cgroup_file"
                sed -i "${row3}i\\        if (cft->ss && (cgrp->root->flags & CGRP_ROOT_NOPREFIX) && !(cft->flags & CFTYPE_NO_PREFIX)) {" "$cgroup_file"
                
                echo "üéñÔ∏è Modified $cgroup_file"
              fi
            fi
          done
          
          # Apply xt_qtaguid patch if needed
          if [ -f "android-kernel/net/netfilter/xt_qtaguid.c" ] && [ -f "${{ env.WORKSPACE }}/LXC/Patches/xt_qtaguid.patch" ]; then
            git am -s < "${{ env.WORKSPACE }}/LXC/Patches/xt_qtaguid.patch"
            echo "üéñÔ∏è Applied xt_qtaguid.patch"
          fi
          
          echo "LXC setup completed"

      - name: üëç Start building the kernel
        working-directory: ${{ env.KERNEL_NAME }}
        env:
          ARGS: ${{ steps.generate-args.outputs.ARGS }}
        run: |
          echo "ü§î PATH Variable: $PATH"
          echo "üöÄ Starting kernel build..."
          
          export KBUILD_BUILD_HOST=Github-Action
          export KBUILD_BUILD_USER=$(echo ${{ github.actor }} | tr A-Z a-z)
          
          # Generate defconfig
          echo "Generating defconfig..."
          eval "make ${{ env.ARGS }} ${{ env.KERNEL_DEFCONFIG_PATH }}"
          
          # Start kernel compilation
          echo "Starting kernel compilation..."
          eval "make ${{ env.ARGS }}"
          
          echo "‚úÖ Kernel build completed successfully!"
          
          # Show ccache stats if enabled
          if [ "${{ env.ENABLE_CCACHE }}" = "true" ]; then
            ccache -s
          fi

      - name: üíõ Upload Image
        uses: actions/upload-artifact@v4
        env:
          ARCH: ${{ steps.generate-args.outputs.ARCH }}
        with:
          name: ${{ env.KERNEL_NAME }}-${{ env.BUILD_DATE }}-Image
          path: ${{ env.OUT_DIR }}/arch/${{ env.ARCH }}/boot/Image
          if-no-files-found: ignore
          retention-days: 7

      - name: üíô Upload Image.gz
        uses: actions/upload-artifact@v4
        env:
          ARCH: ${{ steps.generate-args.outputs.ARCH }}
        with:
          name: ${{ env.KERNEL_NAME }}-${{ env.BUILD_DATE }}-Image.gz
          path: ${{ env.OUT_DIR }}/arch/${{ env.ARCH }}/boot/Image.gz
          if-no-files-found: ignore
          retention-days: 7

      - name: üíô Upload Image.gz-dtb
        uses: actions/upload-artifact@v4
        env:
          ARCH: ${{ steps.generate-args.outputs.ARCH }}
        with:
          name: ${{ env.KERNEL_NAME }}-${{ env.BUILD_DATE }}-Image.gz-dtb
          path: ${{ env.OUT_DIR }}/arch/${{ env.ARCH }}/boot/Image.gz-dtb
          if-no-files-found: ignore
          retention-days: 7

      - name: üíú Upload dtb
        uses: actions/upload-artifact@v4
        env:
          ARCH: ${{ steps.generate-args.outputs.ARCH }}
        with:
          name: ${{ env.KERNEL_NAME }}-${{ env.BUILD_DATE }}-dtb
          path: ${{ env.OUT_DIR }}/arch/${{ env.ARCH }}/boot/dtb
          if-no-files-found: ignore
          retention-days: 7

      - name: ‚ù§Ô∏è Upload dtbo.img
        uses: actions/upload-artifact@v4
        env:
          ARCH: ${{ steps.generate-args.outputs.ARCH }}
        with:
          name: ${{ env.KERNEL_NAME }}-${{ env.BUILD_DATE }}-dtbo.img
          path: ${{ env.OUT_DIR }}/arch/${{ env.ARCH }}/boot/dtbo.img
          if-no-files-found: ignore
          retention-days: 7

      - name: ‚ò¢Ô∏è Upload output directory
        uses: actions/upload-artifact@v4
        env:
          ARCH: ${{ steps.generate-args.outputs.ARCH }}
        with:
          name: ${{ env.KERNEL_NAME }}-${{ env.BUILD_DATE }}-Output
          path: ${{ env.OUT_DIR }}/arch/${{ env.ARCH }}/boot/
          retention-days: 7

      - name: ‚è∞ Pack Anykernel3
        if: ${{ env.USE_ANYKERNEL3 == 'true' }}
        env:
          PARAMS: "${{ toJSON(matrix.CONFIG.AnyKernel3) }}"
          ARCH: ${{ steps.generate-args.outputs.ARCH }}
          ANYKERNEL3_FILE: "${{ env.WORKSPACE }}/AnyKernel3-${{ env.KERNEL_NAME }}-${{ env.BUILD_DATE }}"
        run: |
          echo "üì¶ Preparing AnyKernel3 package..."
          
          # Clone AnyKernel3
          if echo -n '${{ env.PARAMS }}' | jq -e 'has("custom")' > /dev/null; then
            CUSTOM_ANYKERNEL3=$(echo -n '${{ env.PARAMS }}' | jq -r ".custom")
            ANYKERNEL_REPO=$(echo $CUSTOM_ANYKERNEL3 | jq -r ".repo")
            ANYKERNEL_BRANCH=$(echo $CUSTOM_ANYKERNEL3 | jq -r ".branch")
            git clone --recursive --depth=1 -j $(nproc) --branch $ANYKERNEL_BRANCH $ANYKERNEL_REPO AnyKernel3
            echo "ü§î Using custom AnyKernel3 from $ANYKERNEL_REPO"
          else
            git clone --recursive --depth=1 -j $(nproc) https://github.com/osm0sis/AnyKernel3 AnyKernel3
            # Configure AnyKernel3 for generic use
            sed -i 's/do.devicecheck=1/do.devicecheck=0/g' AnyKernel3/anykernel.sh
            sed -i 's!block=/dev/block/platform/omap/omap_hsmmc.0/by-name/boot;!block=auto;!g' AnyKernel3/anykernel.sh
            sed -i 's/is_slot_device=0;/is_slot_device=auto;/g' AnyKernel3/anykernel.sh
            echo "ü§î Using original AnyKernel3 from https://github.com/osm0sis/AnyKernel3"
          fi

          # Copy kernel files
          if [ -e "${{ env.OUT_DIR }}/arch/${{ env.ARCH }}/boot/Image.gz-dtb" ]; then
            cp -f "${{ env.OUT_DIR }}/arch/${{ env.ARCH }}/boot/Image.gz-dtb" ./AnyKernel3/
            echo "‚úÖ Copied Image.gz-dtb"
          else
            # Copy individual files
            for file in Image Image.gz dtbo dtbo.img; do
              if [ -e "${{ env.OUT_DIR }}/arch/${{ env.ARCH }}/boot/$file" ]; then
                cp -f "${{ env.OUT_DIR }}/arch/${{ env.ARCH }}/boot/$file" ./AnyKernel3/
                echo "‚úÖ Copied $file"
              fi
            done
          fi

          # Create zip package
          cd AnyKernel3/
          zip -r9 "${{ env.ANYKERNEL3_FILE }}.zip" * -x '*.git*' '*~' 
          echo "üì¶ AnyKernel3 package created: ${{ env.ANYKERNEL3_FILE }}.zip"
          
          # Show package contents
          echo "üìã Package contents:"
          unzip -l "${{ env.ANYKERNEL3_FILE }}.zip"

      - name: "üíæ Upload AnyKernel3 image => (${{ env.BUILD_DATE }})"
        env:
          ANYKERNEL3_FILE: "AnyKernel3-${{ env.KERNEL_NAME }}-${{ env.BUILD_DATE }}"
        uses: actions/upload-artifact@v4
        if: ${{ env.USE_ANYKERNEL3 == 'true' }}
        with:
          name: "${{ env.ANYKERNEL3_FILE }}"
          path: AnyKernel3/*.zip
          if-no-files-found: warn

      - name: üßß Create GitHub Release => (${{ env.BUILD_DATE }})
        env:
          ANYKERNEL3_FILE: "${{ env.WORKSPACE }}/AnyKernel3-${{ env.KERNEL_NAME }}-${{ env.BUILD_DATE }}"
        continue-on-error: true
        uses: softprops/action-gh-release@v2  # Updated to v2
        if: ${{ env.USE_ANYKERNEL3 == 'true' && env.CONFIRM_RELEASE == 'true' }}
        with:
          tag_name: v${{ env.BUILD_DATE }}.${{ github.run_number }}
          name: "Kernel Build ${{ env.BUILD_DATE }} - ${{ env.KERNEL_NAME }}"
          body: |
            ## üöÄ Kernel Build Information
            
            **Build Date:** ${{ env.BUILD_DATE }}
            **Kernel Name:** ${{ env.KERNEL_NAME }}
            **Device:** ${{ env.KERNEL_DEVICE }}
            **Branch:** ${{ env.KERNEL_BRANCH }}
            **Run Number:** ${{ github.run_number }}
            
            ### Features
            - KernelSU: ${{ env.ENABLE_KERNELSU == 'true' && '‚úÖ Enabled' || '‚ùå Disabled' }}
            - LXC Support: ${{ env.ENABLE_LXC == 'true' && '‚úÖ Enabled' || '‚ùå Disabled' }}
            - Ccache: ${{ env.ENABLE_CCACHE == 'true' && '‚úÖ Enabled' || '‚ùå Disabled' }}
            
            ### Installation
            Flash the AnyKernel3 zip file through recovery (TWRP/CWM) or using fastboot.
            
            **‚ö†Ô∏è Warning:** Always backup your current kernel before flashing!
          files: "${{ env.ANYKERNEL3_FILE }}.zip"
          draft: false
          prerelease: false
